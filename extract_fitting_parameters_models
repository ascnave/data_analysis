import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit
from Analyse_data import Fit_poly_spectrum, Ar2_N_int
from function import Ar2_radial_profile, Gaussian, polynome, distance_through_toroid, exponential
from Save_and_read import Read_data, Files_list, Save_Aint, Read_Aint

path = "M:\\PD_YAG-Dye_2.61\\Argon_excimer_CRDS\\Analysed_data\\"
#file_save = "Ar2_3slm_Ar.txt"
#file_save = "Ar2_3slm_Ar_with_curtain.txt"
file_save = "Ar2_5slm_Ar.txt"
#file_save = "Ar2_3slm_Ar_5sccm_wetAr.txt"
file = "Radial_Aint_"+file_save

fs=12
cm = 1/2.54
fig, ax = plt.subplots(nrows=2, ncols=4, figsize=(35*cm,19.7*cm))

x1 = [0, 0, 0, 0, 1, 1, 1]
x2 = [0, 1, 2, 3, 0, 1, 2]
i = 0
matplotlib.rcParams["font.family"] = "Times New Roman"
matplotlib.rcParams["mathtext.fontset"] = "cm"

" Instanciate fitting parameters"
N_t_ = []
r_t_ = []
w_t_ = []
x_t_ = []
N_g_ = []
w_g_ = []
x_g_ = []


N_t_err_ = []
r_t_err_ = []
w_t_err_ = []
x_t_err_ = []
N_g_err_ = []
w_g_err_ = []
x_g_err_ = []


Ypos_=[86.2, 85.8, 85.4, 85, 84, 83, 82]
for Ypos in Ypos_:
    Xpos_, N_int_, N_int_std_ = Ar2_N_int(Ypos=Ypos, cross_section=3.3E-16,path_=path+file)

    BG_density = 0.25

    Xpos_ = [x / 10 for x in Xpos_]  # Xpos_ from mm to cm
    N_int_ = [x / 1E10 - BG_density for x in N_int_]
    N_int_std_ = [x / 1E10 for x in N_int_std_]

    popt, pcov = curve_fit(Ar2_radial_profile, Xpos_, N_int_, p0=[10, 0.08, 0.025, 2, 0, 0.2, 5.54])

    x__ = np.arange(-0.22, 0.22, 0.0001)
    y_fit = Ar2_radial_profile(x_=x__, N_t=popt[0], r_1=popt[1], w_t=popt[2], N_ar2=popt[3], x_ar2=popt[4],w_ar2=popt[5], offset=0)
    y_gaussian = popt[3] * Gaussian(x_=x__, x0=popt[4], w=popt[5])
    y_toroid = popt[0] * distance_through_toroid(x_=x__, r_1=popt[1], w_t=popt[2])


    N_t_.append(popt[0])
    r_t_.append(popt[1])
    w_t_.append(popt[2])
    x_t_.append(popt[6])

    N_g_.append(popt[3])
    x_g_.append(popt[4])
    w_g_.append(np.abs(popt[5]))

    N_int_plus = [a + b for a, b in zip(N_int_, N_int_std_)]
    N_int_minus = [a - b for a, b in zip(N_int_, N_int_std_)]

    popt_plus, pcov_plus = curve_fit(Ar2_radial_profile, Xpos_, N_int_plus, p0=[10, 0.08, 0.025, 2, 0, 0.2, 5.54])
    popt_minus, pcov_minus = curve_fit(Ar2_radial_profile, Xpos_, N_int_minus, p0=[1, 0.08, 0.025, 1, 0, 0.2, 5.54], maxfev=10000)


    # error bar calculation
    N_t_err_.append((np.abs(popt[0]-popt_plus[0])+np.abs(popt[0]-popt_minus[0]))/2)
    r_t_err_.append((np.abs(popt[1]-popt_plus[1])+np.abs(popt[1]-popt_minus[1]))/2)
    w_t_err_.append((np.abs(popt[2]-popt_plus[2])+np.abs(popt[2]-popt_minus[2]))/2)
    x_t_err_.append((np.abs(popt[6]-popt_plus[6])+np.abs(popt[6]-popt_minus[6]))/2)

    N_g_err_.append((np.abs(popt[3]-popt_plus[3])+np.abs(popt[3]-popt_minus[3]))/2)
    w_g_err_.append((np.abs(popt[5]-popt_plus[5])+np.abs(popt[5]-popt_minus[5]))/2)
    x_g_err_.append((np.abs(popt[4]-popt_plus[4])+np.abs(popt[4]-popt_minus[4]))/2)


    Xpos_ = [x - popt[6] for x in Xpos_]

    ax[x1[i], x2[i]].errorbar(Xpos_, N_int_, yerr=N_int_std_, fmt='o', capsize=5, color='k', label='3 slm Ar', zorder=1)
    ax[x1[i], x2[i]].plot(x__, y_fit, color='red', lw=3, label='Model fit', zorder=2)
    ax[x1[i],x2[i]].plot(x__, y_gaussian, color='green', label='Gaussian part')
    ax[x1[i],x2[i]].plot(x__, y_toroid, color='blue', label='Toroid part')


    for axis in ['top', 'bottom', 'left', 'right']:
        ax[x1[i],x2[i]].spines[axis].set_linewidth(2)

    z = abs(Ypos - 86.2)

    ax[x1[i], x2[i]].set_xlim(-0.19, 0.19)
    ax[x1[i], x2[i]].set_xticks([-0.16, -0.08, 0, 0.08, 0.16], fontsize=fs)
    ax[x1[i], x2[i]].set_xticks([-0.12, -0.04, 0.04, 0.12], minor=True)

    if i == 0:
        ax[x1[0], x2[0]].set_ylim(0, 4.9)
        ax[x1[0], x2[0]].set_yticks((0, 2, 4))
        ax[x1[0], x2[0]].set_yticks((1, 3), minor=True)
        ax[x1[0], x2[0]].text(0.9, 4.2, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)
    elif i == 1:
        ax[x1[1], x2[1]].set_ylim(0, 2.9)
        ax[x1[1], x2[1]].set_yticks((0, 1, 2))
        ax[x1[1], x2[1]].set_yticks((0.5, 1.5, 2.5), minor=True)
        ax[x1[1], x2[1]].text(0.9, 2.5, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)
    elif i == 2:
        ax[x1[2], x2[2]].set_ylim(0, 2.4)
        ax[x1[2], x2[2]].set_yticks((0, 1, 2))
        ax[x1[2], x2[2]].set_yticks((0.5, 1.5), minor=True)
        ax[x1[2], x2[2]].text(0.9, 2, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)
    elif i == 3:
        ax[x1[3], x2[3]].set_ylim(0, 2.1)
        ax[x1[3], x2[3]].set_yticks((0, 0.8, 1.6))
        ax[x1[3], x2[3]].set_yticks((0.4, 1.2, 2), minor=True)
        ax[x1[3], x2[3]].text(0.9, 1.75, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)
    elif i == 4:
        ax[x1[4], x2[4]].set_ylim(0, 1.4)
        ax[x1[4], x2[4]].set_yticks((0, 0.5, 1))
        ax[x1[4], x2[4]].set_yticks((0.25, 0.75, 1.25), minor=True)
        ax[x1[4], x2[4]].text(0.9, 1.2, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)
    elif i == 5:
        ax[x1[5], x2[5]].set_ylim(0, 0.99)
        ax[x1[5], x2[5]].set_yticks((0, 0.4, 0.8))
        ax[x1[5], x2[5]].set_yticks((0.2, 0.6), minor=True)
        ax[x1[5], x2[5]].text(0.9, 0.85, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)
    elif i == 6:
        ax[x1[6], x2[6]].set_ylim(0, 0.79)
        ax[x1[6], x2[6]].set_yticks((0, 0.2, 0.4, 0.6))
        ax[x1[6], x2[6]].set_yticks((0.1,0.3, 0.5, 0.7), minor=True)
        ax[x1[6], x2[6]].text(0.9, 0.68, 'z = ' + '{0:.1f}'.format(z), fontsize=1.2*fs)


    ax[x1[i], x2[i]].tick_params(axis='both', which='major', labelsize=fs, direction="in", length=4, width=2, left=True, right=True, bottom=True, top=True)
    ax[x1[i], x2[i]].tick_params(axis='both', which='minor', labelsize=fs, direction="in", length=2, width=2, left=True, right=True, bottom=True, top=True)

    #ax[x1[i], x2[i]].set_ylabel("N$_{int}$ [10$^{10}$ cm$^{-2}$]", fontsize=fs)
    fig.text(0.07, 0.5, "N$_{int}$ [10$^{10}$ molecule . cm$^{-2}$]", va='center', rotation='vertical', fontsize=fs)


    i += 1

ax[1, 0].set_xlabel("x [mm]", fontsize=fs)
ax[1, 1].set_xlabel("x [mm]", fontsize=fs)
ax[1, 2].set_xlabel("x [mm]", fontsize=fs)
ax[0, 3].set_xlabel("x [mm]", fontsize=fs)

handles, labels = ax[x1[0], x2[0]].get_legend_handles_labels()
order= [3,0,1,2]

#ax[x1[6], x2[6]].legend([handles[idx] for idx in order],[labels[idx] for idx in order], bbox_to_anchor=(1.8, 0.6), loc='best', fontsize=fs, ncol=1, frameon=False)
ax[x1[6], x2[6]].legend(bbox_to_anchor=(1, 0.6), loc='best', fontsize=fs, ncol=1, frameon=False)

fig.delaxes(ax[1, 3])
plt.subplots_adjust( hspace=0)

f = open(path+"fitting_parameters\\"+file_save, 'w')
f.close()



for i in range(0, len(Ypos_)):
    data_ = [Ypos_[i], N_t_[i],r_t_[i],w_t_[i],x_t_[i],N_g_[i],w_g_[i],x_g_[i],
            N_t_err_[i],r_t_err_[i],w_t_err_[i],x_t_err_[i],N_g_err_[i],w_g_err_[i],x_g_err_[i]]
    with open(path+"fitting_parameters\\"+file_save, 'a') as f:
        f.write(str(data_) + '\n')


plt.show()
#plt.savefig('M:\\PD_YAG-Dye_2.61\\Argon_excimer_CRDS\\Publication_2\\figures\\figure6.eps', format='eps')




