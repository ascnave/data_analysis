import matplotlib.pyplot as plt
import numpy as np
import struct as st
import os



def read_multi_FTIR_files(file_path):
    """ function that loads .0000 FTIR OPUS files and return a list of its content, a dictionary containing all data blocks and a dictionary "metadata" containing parameters of the measurement.

    Inputs: - "file_path" (char) = path + filename
    Outputs: - "id_data" (array of string) = Ig_n (Interferogram), PS_n (Phase Spectrum), Sp_n (spectrum). "n" correspond to the number in which the data block was read.
             - "data" (dictionary {'X_'+id_data[j]:x,'Y_'+id_data[j]:y}):
                - 'X_'+id_data[j] (string) = label of the array
                - "x" (array of float) = (cm-1/MHz) data point, wavenumber or frequency.
                - "y" (array of float) = (a.u.) light intensity on the detector.
            - "metadata" (dictionary {'DUR':DUR}):
                - 'DUR' (string) = parameter abreviation
                - DUR (variable) = value of parameter
    """
    ### For now this function can only identify Interferogram (Ig), Phase Spectrum (PS) or Spectrum (Sp) ###
    ### Transmittance will be identified as a spectrum and background data blocks will not be identified as such ###

    """ Structure of OPUS file

    Contents:
        1)Header
        2)Data Blocks
        3)End of file note

        Many abbreviation meaning can be found in Z:\MSF\Manuals_&_Equipment\Spectrometers\Bruker\Documentation\programming.pdf

        Header:
            Unknown bite string -> preHeader=b'\n\n\xfe\xfe\x00\x00\x00\x00\\\x18,A\x18\x00\x00\x00(\x00\x00\x00\x13\x00\x00\x00\x004\x00\x00x\x00\x00\x00\x18\x00\x00\x00`\x00\x00\x00<\x00\x00\x00\xf8\x01\x00\x00@\x00\x00\x00\x1e\x00\x00\x00\xe8\x02\x00\x000\x00\x00\x00,\x00\x00\x00`\x03\x00\x00\xa0\x00\x00\x00J\x00\x00\x00\x10\x04\x00\x00\x07\x08\x00\x00(\xe0\x00\x008\x05\x00\x00\x17\x08\x00\x002\x00\x00\x00\xd8\x85\x03\x00\x07\x0c\x00\x00\x00\x80\x00\x00\xa0\x86\x03\x00\x07\x04\x00\x00\xd2@\x00\x00\x10\x87\x05\x00\x07\x88\x00\x00(\xe0\x00\x00\xc8\x8a\x06\x00\x17\x88\x00\x002\x00\x00\x00h\x0b\n\x00\x07\x8c\x00\x00\x00\x80\x00\x000\x0c\n\x00\x07\x84\x00\x00\xd2@\x00\x00\xa0\x0c\x0c\x00\x00\x00h@\x94\x02\x00\x00X\x10\r\x00\x17\x04\x00\x00,\x00\x00\x00\xa8\x1a\r\x00\x17\x84\x00\x00,\x00\x00\x00X\x1b\r\x00\x17\x0c\x00\x00,\x00\x00\x00\x08\x1c\r\x00\x17\x8c\x00\x00,\x00\x00\x00\xb8\x1c\r\x00 \x00\x00\x00\x86\x00\x00\x00h\x1d\r'
            Optical parameter
            FT - Parameters
            Acquision parameters
            Sample parameters

        Data Blocks -> Interferogram (Ig), Phase spectrum (PS), Spectrum (Sp) encoded bynary (byte_type = '<f', byte_size=4)
        Data Blocks Footnotes-> DPF -> Data Point format
                            -> NPT -> Number of data point
                            -> FXV -> First data point
                            -> LXV -> Last data point
                            -> NSN -> Scan number
                            -> TPX -> Total point X
                            -> CSF -> Y-scaling factor
                            -> MXY -> Y-maximum
                            -> MNY -> Y-minimum
                            -> DXU -> X units
                            -> DAT -> Date of measurement
                            -> TIM -> Time of measurement

        End of file note:
            Datafile History
            COMMAND_LINE MeasureRepeated         
            Empty data block -> only footnote leftover (probably use in case Transmission and Background are requested to be saved in the OPUS software)
            Instrument parameters    
    """

    f = open(file_path, "rb")

    metadata = {}

    ### Find END, NPT, FXV, LXV locations###
    file_size = os.stat(file_path).st_size

    f.seek(0)
    data = f.read(file_size)

    END_pos = indices(data, b'END\x00')
    NPT_pos = indices(data, b'NPT\x00')
    FXV_pos = indices(data, b'FXV\x00')
    LXV_pos = indices(data, b'LXV\x00')

    if (len(NPT_pos) != len(FXV_pos)) or (len(NPT_pos) != len(LXV_pos)) or (len(LXV_pos) != len(FXV_pos)):
        return 'NaN', 'Not the same number of NPT,FXV or LXV, file is skipped', file_path

    ### Store Number of points (NPT) for all data block ###
    byte_type = '<i'
    byte_size = 4
    for i in range(0, len(NPT_pos)):
        f.seek(NPT_pos[i] + 8)
        byte = f.read(byte_size)
        if i == 0:
            NPT = [st.unpack(byte_type, byte)[0]]
        else:
            NPT.append(st.unpack(byte_type, byte)[0])

    ### Store First data point (FXV) for all data block ###
    byte_type = '<d'
    byte_size = 8
    for i in range(0, len(FXV_pos)):
        f.seek(FXV_pos[i] + 8)
        byte = f.read(byte_size)
        if i == 0:
            FXV = [st.unpack(byte_type, byte)[0]]
        else:
            FXV.append(st.unpack(byte_type, byte)[0])

    ### Store Last data point (LXV) for all data block ###
    byte_type = '<d'
    byte_size = 8
    for i in range(0, len(LXV_pos)):
        f.seek(LXV_pos[i] + 8)
        byte = f.read(byte_size)
        if i == 0:
            LXV = [st.unpack(byte_type, byte)[0]]
        else:
            LXV.append(st.unpack(byte_type, byte)[0])

    ### Number of data blocks ###
    Nb_data_block = sum(min(NPT) < np.diff(END_pos))

    NPT_Nb = NPT[0:Nb_data_block]

    ### Identification of data block ###
    id_data = []
    j = 1
    k = 1
    l = 1
    for i in range(0, Nb_data_block):
        if all(p <= NPT_Nb[i] for p in NPT_Nb):
            id_data.append('Ig_' + str(j) + '')
            j += 1
        elif all(p >= NPT_Nb[i] for p in NPT_Nb):
            id_data.append('Sp_' + str(k) + '')
            k += 1
        else:
            id_data.append('PS_' + str(l) + '')
            l += 1

    ### Read OPUS file ###

    ### Find Size Header ###
    f.seek(0)
    Header = f.read(2000)
    END_pos = END_pos[3] + 3

    # # i=0
    # # f.seek(END_pos+i)
    # # while f.read(1)==b'\x00':
    # #     f.seek(END_pos+i)
    # #     i+=1

    ### Previous approach to count b'\x00' do not work because some files have a tenth b'\x00' which is part of the data block ###
    ### Number of b'\x00' appears to be stable over all files ###
    x00_count = 9

    Header_size = END_pos + x00_count

    f.seek(0)
    Header = f.read(Header_size + 1)

    # print (Header)
    # Header_str=str(Header.decode('cp437'))
    # print(Header_str)

    ### Extract Data Blocks ###
    ### Signal gain to be found and apply on interferogram  ###
    number_of_byte = Header_size
    byte_type = '<f'
    byte_size = 4
    data = {}

    for j in range(0, Nb_data_block):
        i = 0
        step = ((LXV[j] - FXV[j]) / (NPT[j] - 1))
        while i < NPT[j]:
            f.seek(number_of_byte + byte_size * i)
            byte = f.read(byte_size)
            if i == 0:
                y = [st.unpack(byte_type, byte)[0]]
                x = [FXV[j]]
                i += 1
            else:
                try:
                    y.append(st.unpack(byte_type, byte)[0])
                except Exception:
                    return 'NaN', 'Cannot read file', file_path
                x.append(FXV[j] + i * step)
                i += 1

        data.update({'X_' + id_data[j]: x, 'Y_' + id_data[j]: y})

        ### Find start for next data block ###

        number_of_byte += 4 * NPT[j]
        f.seek(number_of_byte)
        Footnote = f.read(500)
        byte_to_find = b'END'
        END_pos = Footnote.index(byte_to_find) + 3

        # i=0
        # f.seek(number_of_byte+END_pos+i)
        # while f.read(1)==b'\x00':
        #     f.seek(number_of_byte+END_pos+i)
        #     i+=1

        ### Previous approach to b'\x00' do not work because some files have a sixth b'\x00' which is part of the data block ###
        x00_count = 5

        number_of_byte += END_pos + x00_count

    ### Extract metadata from end of file note (EFN) ###

    ### Find DUR -> scan time(sec) ###
    f.seek(number_of_byte)
    EFN = f.read(file_size - number_of_byte)
    DUR_pos = EFN.index(b'DUR')

    byte_type = '<d'
    byte_size = 8
    f.seek(number_of_byte + DUR_pos + 8)

    byte = f.read(byte_size)
    DUR = st.unpack(byte_type, byte)[0]

    ### Find Date & Time stamp ###
    EFN_pos = EFN.index(b'\t\t')
    f.seek(number_of_byte + EFN_pos + 2)
    byte = f.read(19)

    DATE = byte[:10].decode("utf-8")
    TEMP = byte[11:].decode("utf-8")

    ### Update Metadata ###
    metadata.update({'DUR': DUR})
    metadata.update({'DATE': DATE})
    metadata.update({'TEMP': TEMP})

    return id_data, data, metadata
    f.close()
